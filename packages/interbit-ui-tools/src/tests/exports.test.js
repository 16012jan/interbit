const assert = require('assert')
const api = require('../../src')

describe('module exports expected API', () => {
  it('blockExplorer', () => {
    assert.ok(api.blockExplorer)
    assert.ok(api.blockExplorer.actionCreators)
    assert.ok(api.blockExplorer.actionCreators.setSelectedBlockHash)
    assert.ok(api.blockExplorer.actionCreators.setSelectedChain)
    assert.ok(api.blockExplorer.actionCreators.toggleRawData)
    assert.ok(api.blockExplorer.actionTypes)
    assert.ok(api.blockExplorer.reducer)
    assert.ok(api.blockExplorer.selectors)
    assert.ok(api.blockExplorer.selectors.getExploreChainState)
    assert.ok(api.blockExplorer.selectors.getExploreChainAliases)
  })

  it('chainDispatch', () => {
    assert.ok(api.chainDispatch)
  })

  it('middleware', () => {
    assert.ok(api.middleware)
    assert.ok(api.middleware.actionCreators)
    assert.ok(api.middleware.actionCreators.chainBlockAdded)
    assert.ok(api.middleware.actionCreators.chainBlocking)
    assert.ok(api.middleware.actionCreators.chainDispatch)
    assert.ok(api.middleware.actionCreators.chainError)
    assert.ok(api.middleware.actionCreators.chainGenesis)
    assert.ok(api.middleware.actionCreators.chainLoaded)
    assert.ok(api.middleware.actionCreators.chainLoading)
    assert.ok(api.middleware.actionCreators.chainSponsoring)
    assert.ok(api.middleware.actionCreators.chainSubscribed)
    assert.ok(api.middleware.actionCreators.chainStatus)
    assert.ok(api.middleware.actionCreators.chainUpdated)
    assert.ok(api.middleware.actionCreators.initialConfig)
    assert.ok(api.middleware.actionCreators.interbitError)
    assert.ok(api.middleware.actionCreators.interbitPublicKey)
    assert.ok(api.middleware.actionCreators.interbitReady)
    assert.ok(api.middleware.actionCreators.loadInterbitSaga)
    assert.ok(api.middleware.actionCreators.privateChainSaga)
    assert.ok(api.middleware.actionCreators.sponsorChainSaga)
    assert.ok(api.middleware.actionTypes)
    assert.ok(api.middleware.createMiddleware)
    assert.ok(api.middleware.reducer)
    assert.ok(api.middleware.rootSaga)
    assert.ok(api.middleware.selectors)
    assert.ok(api.middleware.selectors.getBlockMaster)
    assert.ok(api.middleware.selectors.getChain)
    assert.ok(api.middleware.selectors.getChainId)
    assert.ok(api.middleware.selectors.getConfiguredChains)
    assert.ok(api.middleware.selectors.getConfiguredPeers)
    assert.ok(api.middleware.selectors.getConnectionStatus)
    assert.ok(api.middleware.selectors.getCovenantHash)
    assert.ok(api.middleware.selectors.getInterbitStatus)
    assert.ok(api.middleware.selectors.getPrivateChain)
    assert.ok(api.middleware.selectors.getPrivateChainId)
    assert.ok(api.middleware.selectors.getPublicChain)
    assert.ok(api.middleware.selectors.getPublicChainId)
    assert.ok(api.middleware.selectors.getPublicKey)
    assert.ok(api.middleware.selectors.getSponsorConfig)
    assert.ok(api.middleware.selectors.isChainLoaded)
    assert.ok(api.middleware.selectors.isPublicChainLoaded)
    assert.ok(api.middleware.selectors.immutable)
    assert.ok(api.middleware.selectors.interbitAtRoot)
    assert.ok(api.middleware.selectors.fromStoreRoot)
  })

  it('parameterEncoding', () => {
    assert.ok(api.parameterEncoding)
    assert.ok(api.parameterEncoding.packState)
    assert.ok(api.parameterEncoding.parseState)
    assert.ok(api.parameterEncoding.packCAuthParams)
    assert.ok(api.parameterEncoding.parseCAuthParams)
  })
})
